MÉTODOS 

1. Entender o que é um Método 
2. Saber como definir e utilizar 
3. Aplicas boas práticas em sua criação e uso 

- Conceituação: 
é uma porção de códigos (sub-rotina) que é disponibilizada por uma classe. Este é executado quando é feita uma requisição a ele. 
São responsáveis por definir e realizar um determinado comportamento.

- Padrão de Definição:
<?visibilidade?>  = "public", "protected" ou "private"
<?tipo?> = concreto ou abstrato
<?modificação?>  = "static" ou "final"
retorno = tippo de dado ou "void"
nome = nome que é fornecido ao método
(?>parâmetros?>) = parâmetros que pode receber
<?exceções?>  = exceções que pode lançar 
corpo  = código que possui ou vazio

Particularidades:

- assinatura: é a forma de identificar unicamente o método 
 ass= nome+ parâmetros 

Método: 
public double calcularTotalVenda (double precoItem1, double precoItem2, double precoItem3) 

Assinatura: 
calcularTotalVenda (double precoItem1, double precoItem2, double precoItem3) 

Construtor e Destrutor: São métodos especiais usados na Orientação a Objetos. 

Mensagem: é o ato de solicitar ao método que o mesmo execute. Esta pode ser direcionada a um objeto ou a uma classe. 

Passagem de Parâmetros: 
- Por valor (cópia) 
- Por referência (endereço) 

Boas Práticas

- Nomes devem descritivos, mas curtos 
- Notação camelo
(VerficarSaldo(); executarTransferencia(...); existeDebito(); 
- Deve possuir entre 80 a 120 linhas 
- Evita lista de parâmentros Longas 
- Visibilidade adequada 


SOBRECARGA

Conceito: é a capacidade de definir métodos para diferentes contextos, mas preservando seu nome. 

Criação: Alteral a assisnatura do método:
Ass = Nome + parâmetros

SOBRECARGA = E MANTER UM NOME E MUDAR A LISTA DE PARAMETROS 


RETORNOS 
1. E uma instrução de interrupção
2. Simbologia: Return

O método executa seu retorno quando: 
- Completa todas suas instruções internas 
- Chega a uma declaração explicita de retorno
- Lança uma exceção

Considerações: 
- O tipo de retorno do método é definido na sua criação e pode ser um tipo primitivo ou objeto;
- O tipo de dado do return deve ser compatível com o do método;
- Se o método for sem retorno(void), pode ou não ter um "return" para encerrar sua execução.